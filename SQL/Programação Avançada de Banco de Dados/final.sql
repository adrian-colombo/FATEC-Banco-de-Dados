CREATE TABLE ORDEM AS SELECT * FROM OE.ORDERS;
CREATE TABLE ORDEM_ITEM AS SELECT * FROM OE.ORDER_ITEMS;

CREATE TABLE LOG_ERROEXECUCAO(
    ID_LOG NUMBER PRIMARY KEY,
    NOMEPROG VARCHAR2(30) NOT NULL,
    PARAM_ENTRADA VARCHAR2(120) NULL,
    COD_ERRO NUMBER(6) NOT NULL,
    DESC_ERRO VARCHAR2(500) NOT NULL,
    LINHA_ERRO VARCHAR2(500) NOT NULL,
    USUARIO VARCHAR2(30) NOT NULL,
    DATAHORA DATE NOT NULL,
    STATUS CHAR(1) NOT NULL,
    DESC_SOLUCAO VARCHAR2(500) NULL
);

CREATE TABLE LOG_MOD_TAB_ORDEM(
  ID_LOG NUMBER PRIMARY KEY,
  ORDER_ID NUMBER(12) NOT NULL,
  ORDER_TOTAL_ANTES NUMBER(8,2) NOT NULL,
  ORDER_TOTAL_DEPOIS NUMBER(8,2),
  DATA_HORA DATE,
  USUARIO VARCHAR(500)
);

CREATE SEQUENCE SEQ_LOG_MOD_TAB_ORDEM
NOCACHE
NOCYCLE;

CREATE SEQUENCE SEQ_ERROEXEC_LOGID
NOCACHE
NOCYCLE;

-----------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION FUNC_MOD_TAB_ORDEM (P_ORDER_ID IN ORDEM_ITEM.ORDER_ID%TYPE) 
RETURN NUMBER IS
    V_RET NUMBER;
    V_QTDE NUMBER(1);
	V_ERRO NUMBER;
    SOMA NUMBER := 0;
    V_DESCERRO VARCHAR2(500);
    
BEGIN

    SELECT COUNT(*) INTO V_QTDE FROM ORDEM WHERE ORDER_ID = P_ORDER_ID;
    
    IF V_QTDE = 0 THEN
        V_RET := -999;
    ELSE
        FOR RS IN (SELECT UNIT_PRICE, QUANTITY FROM ORDEM_ITEM WHERE ORDER_ID = P_ORDER_ID)
        LOOP
            SOMA := SOMA+(RS.UNIT_PRICE*RS.QUANTITY);
        END LOOP;
        -- DBMS_OUTPUT.PUT_LINE('SOMA:' || SOMA);
        UPDATE ORDEM SET ORDER_TOTAL = SOMA WHERE ORDER_ID = P_ORDER_ID;
        V_RET := 0; 
    END IF;

    COMMIT;
    RETURN V_RET;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            
            V_RET := SQLCODE;
            V_DESCERRO := SQLERRM;
            
            INSERT INTO LOG_ERROEXECUCAO(
                ID_LOG, 
                NOMEPROG, 
                PARAM_ENTRADA, 
                COD_ERRO, 
                DESC_ERRO, 
                LINHA_ERRO, 
                USUARIO, 
                DATAHORA, 
                STATUS,
                DESC_SOLUCAO
            ) VALUES (
                SEQ_ERROEXEC_LOGID.NEXTVAL,
                'FUNC_MOD_TAB_ORDEM',
                'P_ORDER_ID = ' || P_ORDER_ID,
                V_ERRO,
                V_DESCERRO,
                DBMS_UTILITY.FORMAT_ERROR_BACKTRACE(),
                USER,
                SYSDATE,
                'A',
                NULL
            );
        COMMIT;
        RETURN V_RET;
END;


CREATE OR REPLACE TRIGGER TRG_MOD_TAB_ORDEM_LOG
BEFORE UPDATE OF ORDER_ID, ORDER_TOTAL
ON ORDEM 
FOR EACH ROW 

BEGIN
  INSERT INTO LOG_MOD_TAB_ORDEM (
      ID_LOG,      
      ORDER_ID,
      ORDER_TOTAL_ANTES,
      ORDER_TOTAL_DEPOIS,
      DATA_HORA,
      USUARIO
  ) VALUES (
      SEQ_LOG_MOD_TAB_ORDEM.NEXTVAL,
      :OLD.ORDER_ID,
      :OLD.ORDER_TOTAL,
      :NEW.ORDER_TOTAL,
      SYSDATE,
      USER
  );
END;

-- -------------------------------------------------------------------------------------------------------

DECLARE
    P_RETORNO NUMBER;
BEGIN
    P_RETORNO := FUNC_MOD_TAB_ORDEM(2392);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: ' || P_RETORNO);
END;


--

-- SELECT * FROM ORDEM;
-- SELECT * FROM ORDEM_ITEM WHERE ORDER_ID = 2458;

DECLARE
    P_RETORNO NUMBER;
BEGIN
    P_RETORNO := FUNC_MOD_TAB_ORDEM(2458);
    DBMS_OUTPUT.PUT_LINE('RESULTADO: ' || P_RETORNO);
END;