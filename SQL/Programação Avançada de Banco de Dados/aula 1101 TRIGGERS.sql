-- Não usar commit/rollback

CREATE TABLE FUNCIONARIO_1 AS (SELECT * FROM EMPLOYEES);

SELECT * FROM FUNCIONARIO_1;

-- Criação da Trigger
CREATE OR REPLACE TRIGGER TRG_FUNCIONARIO_1_VLDSAL
BEFORE INSERT OR UPDATE OF SALARY
ON FUNCIONARIO_1
FOR EACH ROW
BEGIN
    IF :NEW.SALARY > 9000 THEN
        RAISE_APPLICATION_ERROR(-20000, 'SALARIO ACIMA VALOR PERMITIDO');
    END IF;
END;

-- Não dispara a trigger
UPDATE FUNCIONARIO_1 SET FIRST_NAME = 'MARIA AP' WHERE EMPLOYEE_ID = 107;

-- Dispara a trigger
UPDATE FUNCIONARIO_1 SET FIRST_NAME = 'MARIA AP', SALARY = '8999' WHERE EMPLOYEE_ID = 107;
SELECT * FROM FUNCIONARIO_1 WHERE EMPLOYEE_ID = 107;

-- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X

-- Cria tabela de LOG
CREATE TABLE LOG_FUNCIONARIO_1(
ID_LOG NUMBER PRIMARY KEY,
EMPLOYEE_ID_ANTIGO NUMBER(6),
EMPLOYEE_ID_NOVO NUMBER(6),
FIRST_NAME_ANTIGO VARCHAR2(20), 
FIRST_NAME_NOVO VARCHAR2(20),
SALARY_ANTIGO NUMBER(8,2),
SALARY_NOVO NUMBER(8,2),
DATA_HORA DATE NOT NULL,
USUARIO VARCHAR2(30) NOT NULL
);

CREATE SEQUENCE SEQ_LOG_ID_FUNC_1
NOCACHE
NOCYCLE;

SELECT * FROM FUNCIONARIO_1;
SELECT * FROM LOG_FUNCIONARIO_1;

-- Cria trigger tabela LOG
CREATE OR REPLACE TRIGGER TRG_FUNCIONARIO_1_LOG
BEFORE UPDATE OF FIRST_NAME, SALARY
ON FUNCIONARIO_1
FOR EACH ROW
BEGIN

INSERT INTO LOG_FUNCIONARIO_1 (
    ID_LOG,
    EMPLOYEE_ID_ANTIGO,
    EMPLOYEE_ID_NOVO,
    FIRST_NAME_ANTIGO,
    FIRST_NAME_NOVO,
    SALARY_ANTIGO,
    SALARY_NOVO,
    DATA_HORA,
    USUARIO
)
VALUES (
    SEQ_LOG_ID_FUNC_1.NEXTVAL,
    :OLD.EMPLOYEE_ID,
    :NEW.EMPLOYEE_ID,
    :OLD.FIRST_NAME,
    :NEW.FIRST_NAME,
    :OLD.SALARY,
    :NEW.SALARY,
    SYSDATE,
    USER
);
END;

-- Dispara trigger
UPDATE FUNCIONARIO_1 SET SALARY = 5000;
UPDATE FUNCIONARIO_1 SET SALARY = SALARY * 1.10;
ROLLBACK;
COMMIT;

SELECT * FROM LOG_FUNCIONARIO_1 ORDER BY DATA_HORA DESC;

-- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X -- X

-- Cria tabela de LOG
CREATE TABLE LOG_FUNCIONARIO_1(
ID_LOG NUMBER PRIMARY KEY,
EMPLOYEE_ID_ANTIGO NUMBER(6) NULL,
EMPLOYEE_ID_NOVO NUMBER(6) NULL,
FIRST_NAME_ANTIGO VARCHAR2(20), 
FIRST_NAME_NOVO VARCHAR2(20),
SALARY_ANTIGO NUMBER(8,2),
SALARY_NOVO NUMBER(8,2),
DATA_HORA DATE NOT NULL,
USUARIO VARCHAR2(30) NOT NULL,
TIPO CHAR(1) NOT NULL
);

CREATE SEQUENCE SEQ_LOG_ID_FUNC_1
NOCACHE
NOCYCLE;

SELECT * FROM FUNCIONARIO_1;
SELECT * FROM LOG_FUNCIONARIO_1;


-- Cria trigger tabela LOG
CREATE OR REPLACE TRIGGER TRG_FUNCIONARIO_1_LOG
BEFORE INSERT OR DELETE OR UPDATE OF FIRST_NAME, SALARY
ON FUNCIONARIO_1
FOR EACH ROW
BEGIN

IF DELETING THEN
INSERT INTO LOG_FUNCIONARIO_1 (
    ID_LOG,
    EMPLOYEE_ID_ANTIGO,
    EMPLOYEE_ID_NOVO,
    FIRST_NAME_ANTIGO,
    FIRST_NAME_NOVO,
    SALARY_ANTIGO,
    SALARY_NOVO,
    DATA_HORA,
    USUARIO,
    TIPO
)
VALUES (
    SEQ_LOG_ID_FUNC_1.NEXTVAL,
    :OLD.EMPLOYEE_ID,
    :NEW.EMPLOYEE_ID,
    :OLD.FIRST_NAME,
    :NEW.FIRST_NAME,
    :OLD.SALARY,
    :NEW.SALARY,
    SYSDATE,
    USER,
    'D'
);
END IF;

IF INSERTING THEN
INSERT INTO LOG_FUNCIONARIO_1 (
    ID_LOG,
    EMPLOYEE_ID_ANTIGO,
    EMPLOYEE_ID_NOVO,
    FIRST_NAME_ANTIGO,
    FIRST_NAME_NOVO,
    SALARY_ANTIGO,
    SALARY_NOVO,
    DATA_HORA,
    USUARIO,
    TIPO
)
VALUES (
    SEQ_LOG_ID_FUNC_1.NEXTVAL,
    :OLD.EMPLOYEE_ID,
    :NEW.EMPLOYEE_ID,
    :OLD.FIRST_NAME,
    :NEW.FIRST_NAME,
    :OLD.SALARY,
    :NEW.SALARY,
    SYSDATE,
    USER,
    'I'
);
END IF;

IF UPDATING THEN
INSERT INTO LOG_FUNCIONARIO_1 (
    ID_LOG,
    EMPLOYEE_ID_ANTIGO,
    EMPLOYEE_ID_NOVO,
    FIRST_NAME_ANTIGO,
    FIRST_NAME_NOVO,
    SALARY_ANTIGO,
    SALARY_NOVO,
    DATA_HORA,
    USUARIO,
    TIPO
)
VALUES (
    SEQ_LOG_ID_FUNC_1.NEXTVAL,
    :OLD.EMPLOYEE_ID,
    :NEW.EMPLOYEE_ID,
    :OLD.FIRST_NAME,
    :NEW.FIRST_NAME,
    :OLD.SALARY,
    :NEW.SALARY,
    SYSDATE,
    USER,
    'U'
);
END IF;
END;

SELECT * FROM FUNCIONARIO_1;
SELECT * FROM LOG_FUNCIONARIO_1;

UPDATE FUNCIONARIO_1 SET SALARY = 5000 WHERE EMPLOYEE_ID = 107;
DELETE FROM FUNCIONARIO_1 WHERE EMPLOYeE_ID = 105;